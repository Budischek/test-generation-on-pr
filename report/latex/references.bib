
@inproceedings{campos_continuous_2014,
	location = {New York, {NY}, {USA}},
	title = {Continuous Test Generation: Enhancing Continuous Integration with Automated Test Generation},
	isbn = {978-1-4503-3013-8},
	url = {http://doi.acm.org/10.1145/2642937.2643002},
	doi = {10.1145/2642937.2643002},
	series = {{ASE} '14},
	shorttitle = {Continuous Test Generation},
	abstract = {In object oriented software development, automated unit test generation tools typically target one class at a time. A class, however, is usually part of a software project consisting of more than one class, and these are subject to changes over time. This context of a class offers significant potential to improve test generation for individual classes. In this paper, we introduce Continuous Test Generation ({CTG}), which includes automated unit test generation during continuous integration (i.e., infrastructure that regularly builds and tests software projects). {CTG} offers several benefits: First, it answers the question of how much time to spend on each class in a project. Second, it helps to decide in which order to test them. Finally, it answers the question of which classes should be subjected to test generation in the first place. We have implemented {CTG} using the {EvoSuite} unit test generation tool, and performed experiments using eight of the most popular open source projects available on {GitHub}, ten randomly selected projects from the {SF}100 corpus, and five industrial projects. Our experiments demonstrate improvements of up to +58\% for branch coverage and up to +69\% for thrown undeclared exceptions, while reducing the time spent on test generation by up to +83\%.},
	pages = {55--66},
	booktitle = {Proceedings of the 29th {ACM}/{IEEE} International Conference on Automated Software Engineering},
	publisher = {{ACM}},
	author = {Campos, José and Arcuri, Andrea and Fraser, Gordon and Abreu, Rui},
	urldate = {2018-10-29},
	date = {2014},
	keywords = {automated test generation, continuous integration, continuous testing, unit testing},
	file = {ACM Full Text PDF:/home/david/Zotero/storage/IL7LJXD9/Campos et al. - 2014 - Continuous Test Generation Enhancing Continuous I.pdf:application/pdf}
}

@incollection{barros_continuous_2015,
	location = {Cham},
	title = {Continuous Test Generation on Guava},
	volume = {9275},
	isbn = {978-3-319-22182-3 978-3-319-22183-0},
	url = {http://link.springer.com/10.1007/978-3-319-22183-0_16},
	abstract = {Search-based testing can be applied to automatically generate unit tests that achieve high levels of code coverage on object-oriented classes. However, test generation takes time, in particular if projects consist of many classes, like in the case of the Guava library. To allow search-based test generation to scale up and to integrate it better into software development, continuous test generation applies test generation incrementally during continuous integration. In this paper, we report on the application of continuous test generation with {EvoSuite} at the {SSBSE}’15 challenge on the Guava library. Our results show that continuous test generation reduces the time spent on automated test generation by 96 \%, while increasing code coverage by 13.9 \% on average.},
	pages = {228--234},
	booktitle = {Search-Based Software Engineering},
	publisher = {Springer International Publishing},
	author = {Campos, José and Fraser, Gordon and Arcuri, Andrea and Abreu, Rui},
	editor = {Barros, Márcio and Labiche, Yvan},
	urldate = {2018-12-03},
	date = {2015},
	langid = {english},
	doi = {10.1007/978-3-319-22183-0_16},
	file = {Campos et al. - 2015 - Continuous Test Generation on Guava.pdf:/home/david/Zotero/storage/DUSG792Q/Campos et al. - 2015 - Continuous Test Generation on Guava.pdf:application/pdf}
}